/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/* TODO: */
/* 1. Add function key layer to start debuggers, use both raise and lower keys */
/* 2. Add sticky key and momentary to hold tap on symbols layer */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

&sk {
    // don't release mods on other mods presses
    ignore-modifiers;
};

#define AL 0
#define SYM 1
#define NUM 2
#define FUNCS 3
#define SETTINGS 4

#define STAG(keycode) &dwm_ht LA(keycode) keycode // switch tag macro
#define hm_lc(keycode) &hm LCTL keycode
#define hm_rc(keycode) &hm RCTL keycode
#define hm_la(keycode) &hm LALT keycode
#define hm_ra(keycode) &hm RALT keycode

/ {
        behaviors {
            hm: homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
	        td: tapdance {
                compatible = "zmk,behavior-hold-tap";
                label = "TAPDANCE";
                #binding-cells = <2>;
                tapping-term-ms = <150>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

// BASE ALPHABET LAYER
                default_layer {
// ------------------------------------------------------------------
// |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |
// |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |
//             | RPT | RSE |BSPC |   | SPC | ENT  | RPT |
                    bindings = <
                        &none &kp Q       &kp W &kp F      &kp P      &kp B   &kp J &kp L      &kp U       &kp Y   &kp SEMI      &none
                        &none &kp A       &kp R &hm LALT S &hm LGUI T &kp G   &kp M &hm RGUI N &hm RALT E  &kp I   &kp O         &none
                        &none &mt LSHFT Z &kp X &kp C      &kp D      &kp V   &kp K &kp H      &kp COMMA   &kp DOT &mt RSFT FSLH &none
                                                &kp LSHIFT &kp BSPC  &none   &to 1 &kp SPACE  &kp ENTER
                    >;
                };

// SYMBOL LAYER
                symb_layer {
// ------------------------------------------------------------------
// |  ESC  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  ;  |  BKSP  |
// |  TAB  |  =  |  +  |  -  |  '  |   |  \  |  {  |  }  |  |  |  RET   |
// |  `    |  Â£  |  "  |  "  |  "  |   |  [  |  (  |  )  |  ]  |  TO 3  |
//             | RPT | RSE |BSPC |   | SPC | ENT  | RPT |
		            bindings = <
		                &none &kp ESC   &kp AT     &td LC(LG(LS(N4))) LS(N3) &kp DLLR         &kp PRCNT		&kp CARET &kp LS(COMMA) &kp LS(DOT) &kp SEMI &kp BKSP  &none
		                &none &kp TAB   &kp EQUAL  &kp LA(RBKT)              &kp LA(LS(RBKT)) &kp SQT 		&kp BSLH  &kp LBRC      &kp RBRC    &kp PIPE &kp ENTER &none
		                &none &kp TILDE &kp LA(N3) &kp LA(LBKT)              &kp LA(LS(LBKT)) &kp DQT 	    &kp LBKT  &kp LPRN      &kp RPRN    &kp RBKT &to 3     &none
		        			                       &kp BSPC                  &kp LSHIFT  	  &to 0         &to 2     &sk RALT      &kp ENTER
		            >;
		        };

// NUMPAD & AUDIO CONTROL	
		        num_layer {
// ------------------------------------------------------------------
// |  ESC   |  play/pause  |  PREV   |  NEXT    |  _    |   |  -  |  7   |  8  |  9  |       |
// |  TAB   |              |  VOL DN |  VOL UP  |  ???  |   |  =  |  4   |  5  |  6  |  RET  |
// |  TO 4  |  &           |  /      |  *       |  .    |   |  0  |  1   |  2  |  3  |       |
//                         | RPT     | RSE      |BSPC   |   | SPC | ENT  | RPT |
		            bindings = <
		                &none &kp ESC  &kp C_PP &kp C_PREV   &kp C_NEXT   &kp LS(MINUS) &kp MINUS  &kp N7 &kp N8 &kp N9 &trans    &none
		                &none &kp TAB  &trans   &kp C_VOL_DN &kp C_VOL_UP &kp LS(EQUAL) &kp EQUAL  &kp N4 &kp N5 &kp N6 &kp ENTER &none
		                &none &to 4    &kp AMPS &kp SLASH    &kp STAR     &kp DOT    	&kp N0     &kp N1 &kp N2 &kp N3 &to 4    &none
		             			       &LSHT    &BSPC        &to 0  	  &to 2         &sk RALT   &ENTER
		            >;
		        };

// NAVIGATIONAL LAYER (MOUSE)		
		        nav_layer {
// ------------------------------------------------------------------
// |         |     |     |     |     |   |  J     |  L      |  U   |         |       |
// |  F1     |     |     |     |     |   |  LEFT  |  DOWN   |  UP  |  RIGHT  |  RET  |
// |  GRAVE  |     |     |     |     |   |  K  |  H   |  ,  |  .  |  /  |
//             | RPT | RSE |BSPC |   | SPC | ENT  | RPT 
		            bindings = <
		                &none &trans              &trans &trans &trans &trans &trans   &trans    &trans       &kp LG(RBKT) &trans    &none
		                &none &kp F1              &trans &trans &trans &trans &kp LEFT &kp DOWN  &kp UP       &kp RIGHT    &kp ENTER &none
		                &none &td LG(GRAVE) GRAVE &trans &trans &trans &trans &trans   &trans    &trans       &trans       &trans    &none
					                                     &LSHIFT &BSPC &to 0  &to 1 &sk RALT &ENTER
		            >;
		        };

// BLUETOOTH CONNECTIVITY LAYER
		        bt {
		            bindings = <
		                &trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans 
		                &trans  &trans &trans &trans &trans &trans &trans &trans &trans &trans 
		                &bt BT_PRV  &bt BT_NXT &bt BT_CLR &trans &trans   				&trans &trans  &trans  &trans &trans   
					                           &trans      &trans &to 0  				&to 1   &trans &trans
		            >;
		        };

    };
};
